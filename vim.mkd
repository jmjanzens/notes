# vim - vi improved

---

### set vim as default editor for any shell
```bash
$ which vim # locate dir where vim is installed
$ echo "export EDITOR=/usr/bin/vim" >> ~/.[SHELL]rc
$ echo "export VISUAL=/usr/bin/vim" >> ~/.[SHELL]rc
```

### GOTO line n
```
G, 666 # jumps cursor to line number 666
```

### show complete path to current file
```
:echo expand('%:p')
```

### show partial path from within vi
```bash
Ctrl+g
```

### to add permanent startup settings
```bash
$ vi /home/<user>/.vimrc # create if not exists!
# examples 'colorscheme elflord', 'set number', etc.
```

### paste from clipboard
```bash
insert-mode: Ctrl+Shift+v           # in gnome-terminal
or right-click paste-menu in other  # also from insert-mode
```

### to show/hide line numbers
```bash
:set nu
:set nu!
```

### split
```bash
:vsp path/to/new/file.ext   # creates vertical split bar 'tween files
:sp                         # horizontal bar
^w+w                        # toggle focus 'tween splits
^w,[up, down]               # focus on above/below split
```

### swap split windows
```bash
^w, r # swap current window with 'next' one
```

### adjusting width of vertical split
```bash
^w, [< || >]        #  one char
[NUM], ^w, [< || >] #  NUM chars
:resize [NUM]
:vertical resize [NUM]
```

### automatically resize splits to equal dimensions
```bash
^w, =
```

### increment numbers (even GNU screen session)
```bash
^a      # only works if not overridden
^a, a   # works even in screen, tmux
^x      # decrement
```

### jump to opposing bracket
```bash
%       # i.e. Shift+5
# can be paired powerfully
=, %    # indents all code w/in brackets
d, %    # deletes all code w/in brackets
```

### case switching (a, A)
```bash
F1          # toggle char under cursor to upper/lower case
F1 - F4     # toggle [1-4] char's cases
```

### recording macros
```bash
(from command mode)
q, l # 'l' = letter from a-z
@, l # playback recording assigned to this letter
@@   # playback last playback
```

### insert literal character (e.g. tab, even when expandtab set)
```bash
<from Insert mode> 
ctrl+v, [TAB] # good for m4s
```

### to refresh edits of file exterior to vim session (e.g. git merge)
```bash
:e[dit]         # re-opens present file when used without arguments
:set autoread   # in .vimrc makes Vim auto-refresh
```

### different visual modes
```bash
v       # normal drag-and-select
ctrl+v  # visual block
shift+v # visual line !
```

### select to matching XML tag
```bash
v,a,t
##  pairs powerfully with, y or c
[c|y]at # to Change, or Yank
```

### select inner content of XML tag
```bash
v,i,t
## to toggle cursor loc from bottom/top tag
o
```

### enable XML jump-to-matching (builtin plugin)
```bash
:runtime macros/matchit.vim # init
:filetype detect            # activate
:help matchit[-install]     # help
```

### show list of scripts in order they were called
```bash
:scriptnames
# how to read output
# [script id]: [path to script name]
# example output
# 1: /usr/share/vim/vimrc
# 2: /usr/share/vim/vim74/debian.vim
# 3: /usr/share/vim/vim74/syntax/syntax.vim
```

### auto complete suggestions !
```bash
(from Insert mode)
^x, TAB
(alternately, from Command mode)
^p
```

### code folding (set foldmethod=syntax)
```bash
zc # close fold
zo # open fold
zM # close all folds
zR # open all folds
```

### code folding (set foldmethod=manual)
```bash
zf # fold from here to next command
# visual mode, then zf (eg. shift+v, select lines, zf; fold selected lines)!
zo # open lines under cursor
```

### fold on parentheses
```bash
zf, %
```

### comment-out multiple lines
```bash
^r 	# block comment
	# select all lines
I	# i.e. Shift+i
//	# desired characters (#, ", //, etc)
ESC	# after a delay, characters will prepend all lines
```

### find seek to char
```bash
f [char]
### find seek to just before char
t [char]
```

### highlight characters in columns > 80
```bash
:2mat ErrorMsg '\%81v.' # or Boolean, or whatever, instead of ErrorMsg
```

### change highlight colour of element
```bash
:hi <Comment> cterm<f|b>g=<n|str> #  i.e. ":hi Conditional ctermbg=white"
# fg = foreground colour
# bg = background colour
# replace 'cterm' with 'gui' for non-terminal
# n  = 0-255
# str= red, green, blue, etc...
```

### browse element names
```bash
:hi <TAB>
```

### force syntax highlighting on files with weird extensions
```bash
:set syntax=<html|javascript|other>
```

### count wc of found word/pattern in doc
```bash
:%s/\id=//gn
```

### highlight all id tags (words, any, between double-quotes)
```bash
/id="\w\+"
```

### avoiding the [ESC] key
```bash
^c # cancels some actions
^[ # equivalent of esc
```

### toggle line wrap
```bash
: set wrap! # disable
: set wrap  # enable
```

### reload vimrc without exiting editor
```bash
: source ~/.vimrc # OR ...
: source $MYVIMRC
```

### run colo test (newer versions)
```bash
: runtime syntax/colortest.vim
```

### substitute a pattern for a specific line
```bash
: [num] s/from/to/g
```

### demark a certain column
```bash
:set colorcolumn=80 # 0 to turn off
```

### view all 'named' registers
```bash
: reg
```

### paste from register
```bash
"[R]p # where R = char associated with reg
```

### marks

### mark location by name (char)
```bash
m[a-zA-Z0-9]
```

### jump to first non-blank char on marked line
```bash
'[a-zA-Z0-9]
```

### jump to cursor location on marked line
```bash
`[a-zA-Z0-9]
```

### show all invisible chars
```bash
:set list
```

## modify inv chars example (see `:help listchars' for more)
```bash
:set list lcs=eol:N,tab:>-,trail:X
```

### highlight current line
```bash
:set cursorline
### highlight current column
:set cursorcolumn
```

### arglist
> A subset of the buffer which contains,
> by default, file arguments passed when
> launching vim (eg. `vi a.txt b.txt`) but
> can be passed almost any shell expression
> that would resolve to a list of files

## view args
```bash
:ar[gs] # [/home/jm/notes/vim.txt]
```

## jump between files in arglist
```bash
:n[ext], :p[rev]
```

## set contents of arglist
```bash
:args {arglist}
# examples
:args `find . -type f`                  # load all files from `:!pwd`
:args `find . -type f -iname \*.jsx`    # load all jsx file
```

### vimgrep (search for {pattern} in {file(s)}
```bash
:vim[grep][!] /{pattern}/[g][j] {file}
```

## vimgrep list of files
```bash
:vimgrep /React/ \*.jsx
```

## jump back and forth in results list
```bash
# optionally jump to (N of [0-N])
:cn[ext][N], :cp[prev][N]   # can jump between files in arglist
```

## search same file glob as before
```bash
:vimgrep /React/ ##
```

## repeat previous search
```bash
:vimgrep /<^+r,/>/ %
```

## list 'Quick List' of all matches across files
```bash
:lw[indow]
```

## list and allow navigation to selected matches
```bash
:cw[indow] [height] # height = result lines to show
```

## can be piped from vimgrep
```bash
:vim /\<pattern\>/ ## |cw
```

## list all matches in current file
```bash
:g//p # p[rint] is default, so not really necessary
OR
[I
```

### goto to declaration
```bash
g,d # in function
g,D # in file
```

### working with tabs

### open new tab
```bash
:tabnew [filename]
```

### move tab to i
```bash
:tabm[ove] i
```

### move tab i positions left
```bash
:tabm -i
```

### move tab i positions right
```bash
:tabm +i
```

### insert file contents below cursor
```bash
:r[ead] ./somefile.ext
:r !cat ./somefile.ext # equivalent to above
```

